package Algorythm_Analysis;

public class Main_Algorythm_Analysis {

	public static void main(String args[]){
		
		VectorTest test = new VectorTest();
		
		String entry[] = {"Hello", "World", "And", "Good", "Bye"};
	
		test.add(0, "Hello");
		test.add(1, "World");
		test.add(2, "And");
		test.add(3, "Good");
		test.add(4, "Bye");
		
		System.out.println(test.toString());
		
	}
	
}

class VectorTest<E> implements Vector<E>{

	private int size;
	private E[] table;
	
	public VectorTest(E[] list){
		table=list;
		size=list.length;
	}
	
	public VectorTest(){
		table =(E[])new Object[1];
		size=-1;
	}
	
	public String toString(){
		String result = "";
		for(int i=0; i<size; i++){
			if(i!=0){
				result+=", "+table[i];
			}
		}
		return(result);
	}
	
	@Override
	public int size() {
		return(size+1);
	}

	@Override
	public boolean isEmpty() {
		if(size<0){
			return(true);
		}
		return(false);
	}

	@Override
	public void add(int i, E e) throws IndexOutOfBoundsException {
		//Double growth
		System.out.println("Size: "+size() );
		System.out.println("Table Size: "+table.length);
		if(size==table.length){
			E[] temp = (E[]) new Object[table.length*2];
			for(int x=0; x<size+1; x++){
				if(x!=i){
					temp[x]=table[x];
				}else{
					temp[x]=e;
					x++;
				}
			}
		}else{
		//Regular addition
			for(int x=size; x>i; x--){
				table[x]=table[x+1];
			}
			table[i]=e;
			size++;
		}
	}

	@Override
	public E get(int i) throws IndexOutOfBoundsException {
		E got = null;
		if(i<0 || i>size){
			got = table[i];
		}
		return(got);
	}

	@Override
	public E remove(int i) throws IndexOutOfBoundsException {
		E removed = null;
		if(i<0 || i>size){
			removed = table[i--];
		}
		return(removed);
	}

	@Override
	public E set(int i, E e) throws IndexOutOfBoundsException {
		E replaced = null;
		if(i<0 || i>size){
			replaced = table[i];
			table[i]=e;
		}
		return(replaced);
	}
	
}
